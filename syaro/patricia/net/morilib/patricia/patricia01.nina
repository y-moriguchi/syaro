#
# Copyright 2016-2017 Yuichiro Moriguchi
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
--------------------------
Patricia: a Pascal like compiler

@author Yuichiro MORIGUCHI
--------------------------
#machine DFABuilder
#option targetLanguage=Java
#label VAR=/[A-Za-z][A-Za-z0-9]*/
#label LAHEADVAR=/?=[A-Za-z][A-Za-z0-9]*[ \t]*=/
#label S=[\s]
#package net.morilib.patricia
%{
import java.io.FileOutputStream;
import java.io.StringReader;
import net.morilib.syaro.classfile.*;
import net.morilib.syaro.classfile.code.*;
%}
 *S*        @@@@@@@@@@@
 * >-{expr}->         @
 ***        @@@@@@@@@@@
-- expr --
 *S*       @@@@@@@@@@@
 * >-{rel}->         @
 ***       @@@@@@@@@@@
-- rel --
                    +-${S}-+           +-${S}-+
 *S*        @A<AST>@^@@@@@@v@         *^******v*        @@@@@@@@@@@@
 * >-{poly}->%% = _e;       >-+-'='--->        >-{poly}->releq($A);>-(A)
 ***        @@@@@@@@@@@@@@@@@ |       **********        @@@@@@@@@@@@
                              |          +-${S}-+
                              |     *** *^******v*        @@@@@@@@@@@@
                              +-'<'-> >->        >-{poly}->rellt($A);>-(A)
                              |     *v* **********        @@@@@@@@@@@@
                              |      |      +-${S}-+
                              |      |     *^******v*        @@@@@@@@@@@@
                              |      +-'='->        >-{poly}->relle($A);>-(A)
                              |      |     **********        @@@@@@@@@@@@
                              |      |      +-${S}-+
                              |      |     *^******v*        @@@@@@@@@@@@
                              |      +-'>'->        >-{poly}->relne($A);>-(A)
                              |            **********        @@@@@@@@@@@@
                              |          +-${S}-+
                              |     *** *^******v*        @@@@@@@@@@@@
                              +-'>'-> >->        >-{poly}->relgt($A);>-(A)
                                    *v* **********        @@@@@@@@@@@@
                                     |      +-${S}-+ 
                                     |     *^******v*        @@@@@@@@@@@@
                                     +-'='->        >-{poly}->relge($A);>-(A)
                                           **********        @@@@@@@@@@@@
-- poly --
                    +-${S}-+         +-${S}-+
 *S*        @A<AST>@^@@@@@@v@       *^******v*        @@@@@@@@@@
 * >-{term}->%% = _e;       >-+-'+'->        >-{term}->add($A);>-(A)
 ***        @@@@@@@@@@@@@@@@@ |     **********        @@@@@@@@@@
                              |      +-${S}-+
                              |     *^******v*        @@@@@@@@@@
                              +-'-'->        >-{term}->sub($A);>-(A)
                              |     **********        @@@@@@@@@@
                              |       +-${S}-+
                              |      *^******v*        @@@@@@@@@@
                              +-"or"->        >-{term}->or($A); >-(A)
                              |      **********        @@@@@@@@@@
                              |        +-${S}-+
                              |       *^******v*        @@@@@@@@@@
                              +-"xor"->        >-{term}->xor($A);>-(A)
                                      **********        @@@@@@@@@@
-- term --
                    +-${S}-+         +-${S}-+
 *S*        @A<AST>@^@@@@@@v@       *^******v*        @@@@@@@@@@
 * >-{unot}->%% = _e;       >-+-'*'->        >-{unot}->mul($A);>-(A)
 ***        @@@@@@@@@@@@@@@@@ |     **********        @@@@@@@@@@
                              |      +-${S}-+
                              |     *^******v*        @@@@@@@@@@
                              +-'/'->        >-{unot}->div($A);>-(A)
                              |     **********        @@@@@@@@@@
                              |        +-${S}-+
                              |       *^******v*        @@@@@@@@@@@
                              +-"div"->        >-{unot}->idiv($A);>-(A)
                              |       **********        @@@@@@@@@@@
                              |        +-${S}-+
                              |       *^******v*        @@@@@@@@@@
                              +-"mod"->        >-{unot}->mod($A);>-(A)
                              |       **********        @@@@@@@@@@
                              |        +-${S}-+
                              |       *^******v*        @@@@@@@@@@
                              +-"and"->        >-{unot}->and($A);>-(A)
                              |       **********        @@@@@@@@@@
                              |        +-${S}-+
                              |       *^******v*        @@@@@@@@@@
                              +-"shl"->        >-{unot}->shl($A);>-(A)
                              |       **********        @@@@@@@@@@
                              |        +-${S}-+
                              |       *^******v*        @@@@@@@@@@
                              +-"shr"->        >-{unot}->shr($A);>-(A)
                                      **********        @@@@@@@@@@
-- unot --
    +-${S}-+           +-${S}-+
 *S*^******v*         *^******v*         @@@@@@@@@@@
 *          >-+-"not"->        >-{unary}->not();   @
 ************ |       **********         @@@@@@@@@@@
              |
              |         @@@
              +-{unary}-> @
                        @@@
-- unary --
    +-${S}-+         +-${S}-+
 *S*^******v*       *^******v*        @@@@@@@@@@@
 *          >-+-"-"->        >-{elem}->uminus();@
 ************ |     **********        @@@@@@@@@@@
              |
              |        @@@
              +-{elem}-> @
                       @@@
-- elem --
    +-${S}-+
 *S*^******v*        @@@@@@@@@@@@@@
 *          >-+-{%d}->konst($int);@
 ************ |      @@@@@@@@@@@@@@
              |
              |     ***        ***     @@@
              +-'('-> >-{expr}-> >-')'-> @
                    ***        ***     @@@
%%
private static AST _e;

private void konst(Number num) {
	_e = new IntegerAST(num.intValue());
}

private void releq(AST a) {
	_e = new BinaryAST(BinaryAST.Type.EQ, a, _e);
}

private void relne(AST a) {
	_e = new BinaryAST(BinaryAST.Type.NE, a, _e);
}

private void relgt(AST a) {
	_e = new BinaryAST(BinaryAST.Type.GT, a, _e);
}

private void rellt(AST a) {
	_e = new BinaryAST(BinaryAST.Type.LT, a, _e);
}

private void relge(AST a) {
	_e = new BinaryAST(BinaryAST.Type.GE, a, _e);
}

private void relle(AST a) {
	_e = new BinaryAST(BinaryAST.Type.LE, a, _e);
}

private void add(AST a) {
	_e = new BinaryAST(BinaryAST.Type.ADD, a, _e);
}

private void sub(AST a) {
	_e = new BinaryAST(BinaryAST.Type.SUB, a, _e);
}

private void or(AST a) {
	_e = new BinaryAST(BinaryAST.Type.OR, a, _e);
}

private void xor(AST a) {
	_e = new BinaryAST(BinaryAST.Type.XOR, a, _e);
}

private void mul(AST a) {
	_e = new BinaryAST(BinaryAST.Type.MUL, a, _e);
}

private void div(AST a) {
	_e = new BinaryAST(BinaryAST.Type.DIV, a, _e);
}

private void idiv(AST a) {
	_e = new BinaryAST(BinaryAST.Type.DIV, a, _e);
}

private void mod(AST a) {
	_e = new BinaryAST(BinaryAST.Type.REM, a, _e);
}

private void and(AST a) {
	_e = new BinaryAST(BinaryAST.Type.AND, a, _e);
}

private void shr(AST a) {
	_e = new BinaryAST(BinaryAST.Type.SHR, a, _e);
}

private void shl(AST a) {
	_e = new BinaryAST(BinaryAST.Type.SHL, a, _e);
}

private void not() {
	_e = new UnaryAST(UnaryAST.Type.NOT, _e);
}

private void uminus() {
	_e = new UnaryAST(UnaryAST.Type.NEG, _e);
}

public static void main(String[] args) throws Exception {
	Classfile cf = new Classfile();
	MethodInfo mi = new MethodInfo("main", "([Ljava/lang/String;)V");
	Code code = new Code();

	cf.setMajorVersion(45);
	cf.setMinorVersion(3);
	cf.setAccessFlag(Classfile.ACC_PUBLIC);
	cf.setThisClass(ConstantClass.getInstance(args[0]));
	cf.setSuperClass(ConstantClass.getInstance("Ljava/lang/Object;"));
	mi.setAccessFlags(MethodInfo.ACC_PUBLIC | MethodInfo.ACC_STATIC);
	code.setMaxStack(1024);
	code.setMaxLocals(1);
	code.addCode(new Getstatic(ConstantFieldref.getInstance(
			"java/lang/System", "out", "Ljava/io/PrintStream;")));
	parseAll(System.in);
	_e.putCode(new FunctionSpace(args[0]), new LocalVariableSpace(), code);
	code.addCode(new Invokevirtual(ConstantMethodref.getInstance(
			"java/io/PrintStream", "println", "(I)V")));
	code.addCode(Mnemonic.RETURN);
	mi.addAttribute(code);
	cf.addMethod(mi);

	FileOutputStream fs = null;
	try {
		fs = new FileOutputStream(args[0] + ".class");
		cf.generateClassFile(fs);
	} finally {
		if(fs != null) {
			fs.close();
		}
	}
}
