#
# Copyright (c) 2016, Yuichiro MORIGUCHI
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# * Redistributions of source code must retain the above copyright notice, 
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice, 
#   this list of conditions and the following disclaimer in the documentation 
#   and/or other materials provided with the distribution.
# * Neither the name of the Yuichiro MORIGUCHI nor the names of its contributors 
#   may be used to endorse or promote products derived from this software 
#   without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL Yuichiro MORIGUCHI BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
--------------------------
a high order calculator

@author Yuichiro MORIGUCHI
--------------------------
#machine DFABuilder
#option targetLanguage=Java
#label VAR=/[A-Za-z][A-Za-z0-9]*/
#label LAHEADVAR=/?=[A-Za-z][A-Za-z0-9]*[ \t]*=/
#label S=[ \t\n]
#package net.morilib.syaro.test
%{
import java.io.FileOutputStream;
import java.io.StringReader;
import net.morilib.syaro.classfile.*;
import net.morilib.syaro.classfile.code.*;
%}
 @S@@@@@@@@            @@@@@@@@@@@
 @        >-{stmtlist}->         @
 @@@@@@@@@@            @@@@@@@@@@@
-- stmtlist --
         +----------+
 @S@@@@@@v@        @^@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 @        >-{stmt}->_s.putCode(functions, local, code, null, -1, null);@
 @v@@@@@@^@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  +-${S}-+
-- stmt --
    +-${S}-+          +-${S}-+       +-${S}-+                     +-${S}-+
 *S*^******v*        *^******v*     *^******v*        *LIF<AST>* *^******v*     ***
 *          >-+-"if"->        >-'('->        >-{expr}->%% = _e;>->        >-')'-> >-{stmt}-(IF1)
 ************ |      **********     **********        ********** **********     ***
              |        +-${S}-+
              |       *^******v*        *LEL<SAST>*        @@@@@@@@@@@@@@@@@@@@
              | (IF1)->        >-"else"->%% = _s; >-{stmt}->endif($LIF, $LEL);@
              |       *v********        ***********        @@@@@@@@@@@@@@@@@@@@
              |        |
              |        | @@@@@@@@@@@@@@
              |        +->endif($LIF);@
              |          @@@@@@@@@@@@@@
              |          +-${S}-+                  +-${S}-+
              |         *^******v*     ***        *^******v*
              +-"while"->        >-'('-> >-{expr}->        >-')'-(WH1)
              |         **********     ***        **********
              |
              |       *WX<AST>**        @@@@@@@@@@@@@
              | (WH1)->%% = _e;>-{stmt}->endwh($WX);@
              |       **********        @@@@@@@@@@@@@
              |                  +-${S}-+           +-${S}-+                  +-${S}-+
              |      ***        *^******v*         *^******v*     ***        *^******v*
              +-"do"-> >-{stmt}->        >-"while"->        >-'('-> >-{expr}->        >-')'-(DO1)
              |      ***        **********         **********     ***        **********
              |        +-${S}-+
              |       *^******v*     @@@@@@@@@@
              | (DO1)->        >-';'->enddo();@
              |       **********     @@@@@@@@@@
              |        +-${S}-+         +-${S}-+          +-${S}-+       +-${S}-+
              |       *^******v***     *^******v*        *^******v*     *^******v*
              +-"for"->_e = null;>-'('->        >-{expr}->        >-';'->        >-(FO1)
              |       ************     *v********        **********     *^********
              |                         |                                |
              |                         |     ***********                |
              |                         +-';'->         >----------------+
              |                               ***********
              |                     +-${S}-+          +-${S}-+       +-${S}-+
              |       *FE<AST>**** *^******v*        *^******v*     *^******v*
              | (FO1)->%% = _e;  >->        >-{expr}->        >-';'->        >-(FO2)
              |       *_e = null;* *v********        **********     *^********
              |       ************  |                                |
              |                     |     ***********                |
              |                     +-';'->         >----------------+
              |                           ***********
              |                     +-${S}-+          +-${S}-+       +-${S}-+
              |       *FI<AST>**** *^******v*        *^******v*     *^******v*
              | (FO2)->%% = _e;  >->        >-{expr}->        >-')'->        >-(FO3)
              |       *_e = null;* *v********        **********     *^********
              |       ************  |                                |
              |                     |     ***********                |
              |                     +-')'->         >----------------+
              |                           ***********
              |
              |       *FS<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@
              | (FO3)->%% = _e;>-{stmt}->endfor($FE, $FI, $FS);@
              |       **********        @@@@@@@@@@@@@@@@@@@@@@@@
              |          +-${S}-+
              |         *^******v*     @@@@@@@@@@@
              +-"break"->        >-';'->_break();@
              |         **********     @@@@@@@@@@@
              |             +-${S}-+
              |            *^******v*     @@@@@@@@@@@@@@
              +-"continue"->        >-';'->_continue();@
              |            **********     @@@@@@@@@@@@@@
              |                       +-${S}-+
              |     *BL<BlockAST>*** *^******v*        ************
              +-"{"->%% = beginb();>->        >-{stmt}->addb($BL);*
              |     **************** *v******^*        *v**********
              |                       |      +----------+
              |                       |     @@@@@@@@@@@@
              |                       +-'}'->endb($BL);@
              |                             @@@@@@@@@@@@
              |          +-${S}-+          +-${S}-+
              |         *^******v*        *^******v*     @@@@@@@@@@
              +-"print"->        >-{expr}->        >-';'->print();@
              |         **********        **********     @@@@@@@@@@
              |         +-${S}-+
              |        *^******v*     @@@@@@@@@@@
              +-{expr}->        >-';'->simple();@
                       **********     @@@@@@@@@@@
-- expr --
 *S*        @@@@@@@@@@@
 * >-{asgn}->         @
 ***        @@@@@@@@@@@
-- asgn --
             +-${S}-+         +-${S}-+
 *S*        @^@@@@@@v@       *^******v* *AA<AST>**        @@@@@@@@@@@@@@@@@@@@
 * >-{lior}->        >-+-"="->        >->%% = _e;>-{asgn}->asgn(${AA}, null);@
 ***        @@@@@@@@@@ |     ********** **********        @@@@@@@@@@@@@@@@@@@@
                       |       +-${S}-+
                       |      *^******v* *AB<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       +-"+="->        >->%% = _e;>-{asgn}->asgn(${AB}, Mnemonic.IADD);@
                       |      ********** **********        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       |       +-${S}-+
                       |      *^******v* *AC<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       +-"-="->        >->%% = _e;>-{asgn}->asgn(${AC}, Mnemonic.ISUB);@
                       |      ********** **********        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       |       +-${S}-+
                       |      *^******v* *AD<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       +-"*="->        >->%% = _e;>-{asgn}->asgn(${AD}, Mnemonic.IMUL);@
                       |      ********** **********        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       |       +-${S}-+
                       |      *^******v* *AE<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       +-"/="->        >->%% = _e;>-{asgn}->asgn(${AE}, Mnemonic.IDIV);@
                       |      ********** **********        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       |       +-${S}-+
                       |      *^******v* *AF<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       +-"%="->        >->%% = _e;>-{asgn}->asgn(${AF}, Mnemonic.IREM);@
                       |      ********** **********        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       |        +-${S}-+
                       |       *^******v* *AG<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       +-"<<="->        >->%% = _e;>-{asgn}->asgn(${AG}, Mnemonic.ISHL);@
                       |       ********** **********        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       |        +-${S}-+
                       |       *^******v* *AH<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       +-">>="->        >->%% = _e;>-{asgn}->asgn(${AH}, Mnemonic.ISHR);@
                       |       ********** **********        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       |       +-${S}-+
                       |      *^******v* *AI<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       +-"&="->        >->%% = _e;>-{asgn}->asgn(${AI}, Mnemonic.IAND);@
                       |      ********** **********        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       |       +-${S}-+
                       |      *^******v* *AJ<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       +-"^="->        >->%% = _e;>-{asgn}->asgn(${AJ}, Mnemonic.IXOR);@
                       |      ********** **********        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       |        +-${S}-+
                       |       *^******v* *AK<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       +-"\|="->        >->%% = _e;>-{asgn}->asgn(${AK}, Mnemonic.IOR);@
                               ********** **********        @@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- lior --
                    +-${S}-+              +-${S}-+
 *S*        @A<AST>@^@@@@@@v@            *^******v*        @@@@@@@@@@@@
 * >-{land}->%% = _e;       >---"\|\|"--->        >-{land}->lior($A); >-(A)
 ***        @@@@@@@@@@@@@@@@@            **********        @@@@@@@@@@@@
-- land --
                    +-${S}-+            +-${S}-+
 *S*        @A<AST>@^@@@@@@v@          *^******v*        @@@@@@@@@@@@
 * >-{bior}->%% = _e;       >---"&&"--->        >-{bior}->land($A); >-(A)
 ***        @@@@@@@@@@@@@@@@@          **********        @@@@@@@@@@@@
-- bior --
                    +-${S}-+                        +-${S}-+
 *S*        @A<AST>@^@@@@@@v@              ***     *^******v*        @@@@@@@@@@@
 * >-{bxor}->%% = _e;       >-/?=\|[^\|=]/-> >-'|'->        >-{bxor}->bior($A);>-(A)
 ***        @@@@@@@@@@@@@@@@@              ***     **********        @@@@@@@@@@@
-- bxor --
                    +-${S}-+              +-${S}-+
 *S*        @A<AST>@^@@@@@@v@            *^******v*        @@@@@@@@@@@
 * >-{band}->%% = _e;       >---"^/!="--->        >-{band}->bxor($A);>-(A)
 ***        @@@@@@@@@@@@@@@@@            **********        @@@@@@@@@@@
-- band --
                    +-${S}-+                      +-${S}-+
 *S*        @A<AST>@^@@@@@@v@            ***     *^******v*        @@@@@@@@@@@
 * >-{loeq}->%% = _e;       >-/?=&[^&=]/-> >-'&'->        >-{loeq}->band($A);>-(A)
 ***        @@@@@@@@@@@@@@@@@            ***     **********        @@@@@@@@@@@
-- loeq --
                    +-${S}-+              +-${S}-+
 *S*        @A<AST>@^@@@@@@v@            *^******v*        @@@@@@@@@@
 * >-{lcmp}->%% = _e;       >-+-"=="----->        >-{lcmp}->leq($A);>-(A)
 ***        @@@@@@@@@@@@@@@@@ |          **********        @@@@@@@@@@
                              |           +-${S}-+
                              |          *^******v*        @@@@@@@@@@
                              +-"!="----->        >-{lcmp}->lne($A);>-(A)
                                         **********        @@@@@@@@@@
-- lcmp --
                    +-${S}-+                                +-${S}-+
 *S*        @A<AST>@^@@@@@@v@               ***            *^******v*        @@@@@@@@@@
 * >-{shft}->%% = _e;       >-/?=[<>][^<>]/-> >-+-"<"------>        >-{shft}->llt($A);>-(A)
 ***        @@@@@@@@@@@@@@@@@               *** |          **********        @@@@@@@@@@
                                                |           +-${S}-+
                                                |          *^******v*        @@@@@@@@@@
                                                +-"<="----->        >-{shft}->lle($A);>-(A)
                                                |          **********        @@@@@@@@@@
                                                |           +-${S}-+
                                                |          *^******v*        @@@@@@@@@@
                                                +-">"------>        >-{shft}->lgt($A);>-(A)
                                                |          **********        @@@@@@@@@@
                                                |           +-${S}-+
                                                |          *^******v*        @@@@@@@@@@
                                                +-">="----->        >-{shft}->lge($A);>-(A)
                                                           **********        @@@@@@@@@@
-- shft --
                    +-${S}-+                 +-${S}-+
 *S*        @A<AST>@^@@@@@@v@               *^******v*        @@@@@@@@@@@@@
 * >-{poly}->%% = _e;       >-+-">>/!="----->        >-{poly}->rshift($A);>-(A)
 ***        @@@@@@@@@@@@@@@@@ |             **********        @@@@@@@@@@@@@
                              |              +-${S}-+
                              |             *^******v*        @@@@@@@@@@@@@
                              +-"<</!="----->        >-{poly}->lshift($A);>-(A)
                                            **********        @@@@@@@@@@@@@
-- poly --
                    +-${S}-+            +-${S}-+
 *S*        @A<AST>@^@@@@@@v@          *^******v*        @@@@@@@@@@
 * >-{term}->%% = _e;       >-+-"+/!="->        >-{term}->add($A);>-(A)
 ***        @@@@@@@@@@@@@@@@@ |        **********        @@@@@@@@@@
                              |         +-${S}-+
                              |        *^******v*        @@@@@@@@@@
                              +-"-/!="->        >-{term}->sub($A);>-(A)
                                       **********        @@@@@@@@@@
-- term --
                     +-${S}-+            +-${S}-+
 *S*         @A<AST>@^@@@@@@v@          *^******v*         @@@@@@@@@@
 * >-{unary}->%% = _e;       >-+-"*/!="->        >-{unary}->mul($A);>-(A)
 ***         @@@@@@@@@@@@@@@@@ |        **********         @@@@@@@@@@
                               |          +-${S}-+
                               |         *^******v*         @@@@@@@@@@
                               +-"\//!="->        >-{unary}->div($A);>-(A)
                               |         **********         @@@@@@@@@@
                               |         +-${S}-+
                               |        *^******v*         @@@@@@@@@@
                               +-"%/!="->        >-{unary}->mod($A);>-(A)
                                        **********         @@@@@@@@@@
-- unary --
    +-${S}-+         +-${S}-+
 *S*^******v*       *^******v*        @@@@@@@@@@@
 *          >-+-"-"->        >-{prex}->uminus();@
 ************ |     **********        @@@@@@@@@@@
              |      +-${S}-+
              |     *^******v*        @@@@@@@@@@@
              +-"+"->        >-{prex}->         @
              |     **********        @@@@@@@@@@@
              |      +-${S}-+
              |     *^******v*        @@@@@@@@@@@
              +-"~"->        >-{prex}->bnot();  @
              |     **********        @@@@@@@@@@@
              |      +-${S}-+
              |     *^******v*        @@@@@@@@@@@
              +-"!"->        >-{prex}->lnot();  @
              |     **********        @@@@@@@@@@@
              |       +-${S}-+
              |      *^******v*        @@@@@@@@@@@
              +-"++"->        >-{prex}->incpre();@
              |      **********        @@@@@@@@@@@
              |       +-${S}-+
              |      *^******v*        @@@@@@@@@@@
              +-"--"->        >-{prex}->decpre();@
              |      **********        @@@@@@@@@@@
              |
              |        @@@
              +-{prex}-> @
                       @@@
-- prex --
             +-${S}-+
 *S*        @^@@@@@@v@        @@@@@@@@@@@@
 * >-{elem}->        >-+-"++"->incpost();@
 ***        @@@@@@@@@@ |      @@@@@@@@@@@@
                       |
                       |      @@@@@@@@@@@@
                       +-"--"->decpost();@
                       |      @@@@@@@@@@@@
                       |                  +-${S}-+              +-${S}-+
                       |     *AR<CallAST>*^******v* ***        *^******v******
                       +-'('->%% = begincall();   >-> >-{expr}->addcall($AR);*
                             *v******************** *^*        *v**v**********
                              |                      +--','-----+  |
                              |     @@@@@@@@@@@@@                  |
                              +-')'->call($AR); <-')'--------------+
                                    @@@@@@@@@@@@@
-- elem --
    +-${S}-+
 *S*^******v*        @@@@@@@@@@@@@@
 *          >-+-{%d}->konst($int);@
 ************ |      @@@@@@@@@@@@@@
              |
              |     ***        ***     @@@
              +-'('-> >-{expr}-> >-')'-> @
              |     ***        ***     @@@
              |
              |        @@@@@@@@@@@@@@@@@@@@@@@@@@
              +-${VAR}->var($buffer.toString());@
                       @@@@@@@@@@@@@@@@@@@@@@@@@@
%%
private FunctionSpace functions;
private LocalVariableSpace local = new LocalVariableSpace();
private Code code;
private SAST _s;
private AST _e;

private void asgn(AST a, Mnemonic op) {
	_e = new AssignAST(op, a, _e);
}

private void konst(Number num) {
	_e = new IntegerAST(num.intValue());
}

private void lior(AST a) {
	_e = new BinaryAST(BinaryAST.Type.ILOR, a, _e);
}

private void land(AST a) {
	_e = new BinaryAST(BinaryAST.Type.ILAND, a, _e);
}

private void bior(AST a) {
	_e = new BinaryAST(BinaryAST.Type.IBOR, a, _e);
}

private void bxor(AST a) {
	_e = new BinaryAST(BinaryAST.Type.IBXOR, a, _e);
}

private void band(AST a) {
	_e = new BinaryAST(BinaryAST.Type.IBAND, a, _e);
}

private void leq(AST a) {
	_e = new BinaryAST(BinaryAST.Type.IEQ, a, _e);
}

private void lne(AST a) {
	_e = new BinaryAST(BinaryAST.Type.INE, a, _e);
}

private void llt(AST a) {
	_e = new BinaryAST(BinaryAST.Type.ILT, a, _e);
}

private void lle(AST a) {
	_e = new BinaryAST(BinaryAST.Type.ILE, a, _e);
}

private void lgt(AST a) {
	_e = new BinaryAST(BinaryAST.Type.IGT, a, _e);
}

private void lge(AST a) {
	_e = new BinaryAST(BinaryAST.Type.IGE, a, _e);
}

private void rshift(AST a) {
	_e = new BinaryAST(BinaryAST.Type.ISHR, a, _e);
}

private void lshift(AST a) {
	_e = new BinaryAST(BinaryAST.Type.ISHL, a, _e);
}

private void add(AST a) {
	_e = new BinaryAST(BinaryAST.Type.IADD, a, _e);
}

private void sub(AST a) {
	_e = new BinaryAST(BinaryAST.Type.ISUB, a, _e);
}

private void mul(AST a) {
	_e = new BinaryAST(BinaryAST.Type.IMUL, a, _e);
}

private void div(AST a) {
	_e = new BinaryAST(BinaryAST.Type.IDIV, a, _e);
}

private void mod(AST a) {
	_e = new BinaryAST(BinaryAST.Type.IREM, a, _e);
}

private void uminus() {
	_e = new UnaryAST(UnaryAST.Type.INEG, _e);
}

private void bnot() {
	_e = new UnaryAST(UnaryAST.Type.IBNOT, _e);
}

private void lnot() {
	_e = new UnaryAST(UnaryAST.Type.ILNOT, _e);
}

private void incpre() {
	_e = new IncDecAST(true, true, _e);
}

private void decpre() {
	_e = new IncDecAST(false, true, _e);
}

private void incpost() {
	_e = new IncDecAST(true, false, _e);
}

private void decpost() {
	_e = new IncDecAST(false, false, _e);
}

private CallAST begincall() {
	return new CallAST(_e);
}

private void addcall(CallAST call) {
	call.addArgument(_e);
}

private void call(CallAST call) {
	_e = call;
}

private void var(String name) {
	local.putVariable(name);
	_e = new SymbolAST(name);
}

private void endif(AST expr) {
	_s = new IfAST(expr, _s, null);
}

private void endif(AST expr, SAST _if) {
	_s = new IfAST(expr, _if, _s);
}

private void _break() {
	_s = new BreakAST();
}

private void _continue() {
	_s = new ContinueAST();
}

private void endwh(AST expr) {
	_s = new WhileAST(expr, _s);
}

private void enddo() {
	_s = new DoAST(_e, _s);
}

private void endfor(AST fe, AST fi, AST fs) {
	_s = new ForAST(fe, fi, fs, _s);
}

private BlockAST beginb() {
	return new BlockAST();
}

private void addb(BlockAST s) {
	s.addStatement(_s);
}

private void endb(BlockAST s) {
	_s = s;
}

private void print() {
	_s = new PrintAST(_e);
}

private void simple() {
	_s = new SimpleAST(_e);
}

private static FunctionSpace newFunctionSpace(String name) {
	FunctionSpace space = new FunctionSpace(name);
	FunctionDefinition def;

	def = new FunctionDefinition(Primitive.INT, new java.util.ArrayList<VariableType>());
	space.putSpace("getchar", def);
	return space;
}

private static void addBuiltIn(Classfile cf) {
	MethodInfo mi;
	Code cd;

	mi = new MethodInfo("getchar", "()I");
	mi.setAccessFlags(MethodInfo.ACC_PUBLIC);
	cd = new Code();
	cd.addCode(new Getstatic(new ConstantFieldref(
			"java/lang/System", "in", "Ljava/io/InputStream;")));
	cd.addCode(new Invokevirtual(new ConstantMethodref(
			"java/io/InputStream", "read", "()I")));
	cd.addCode(Mnemonic.IRETURN);
	cd.setMaxStack(128);
	cd.setMaxLocals(1);
	mi.addAttribute(cd);
	cf.addMethod(mi);
}

private static void addBootStrap(String name, Classfile cf) {
	MethodInfo mi;
	Code cd;

	mi = new MethodInfo("<init>", "()V");
	mi.setAccessFlags(MethodInfo.ACC_PUBLIC);
	cd = new Code();
	cd.addCode(new ALoad(0));
	cd.addCode(new Invokespecial(new ConstantMethodref("java/lang/Object", "<init>", "()V")));
	cd.addCode(Mnemonic.RETURN);
	cd.setMaxStack(128);
	cd.setMaxLocals(1);
	mi.addAttribute(cd);
	cf.addMethod(mi);

	mi = new MethodInfo("main", "([Ljava/lang/String;)V");
	mi.setAccessFlags(MethodInfo.ACC_PUBLIC | MethodInfo.ACC_STATIC);
	cd = new Code();
	cd.addCode(new New(new ConstantClass(name)));
	cd.addCode(Mnemonic.DUP);
	cd.addCode(Mnemonic.DUP);
	cd.addCode(new Invokespecial(new ConstantMethodref(name, "<init>", "()V")));
	cd.addCode(new Invokevirtual(new ConstantMethodref(name, "main", "()V")));
	cd.addCode(Mnemonic.RETURN);
	cd.setMaxStack(128);
	cd.setMaxLocals(1);
	mi.addAttribute(cd);
	cf.addMethod(mi);
}

public static void main(String[] args) throws Exception {
	Classfile cf = new Classfile();
	MethodInfo mi = new MethodInfo("main", "()V");
	Miyuki6 parser = new Miyuki6();
	Goto gt = new Goto(), gb = new Goto();
	int jp, np;

	parser.code = new Code();
	parser.functions = newFunctionSpace(args[0]);
	cf.setMajorVersion(45);
	cf.setMinorVersion(3);
	cf.setAccessFlag(Classfile.ACC_PUBLIC);
	cf.setThisClass(new ConstantClass(args[0]));
	cf.setSuperClass(new ConstantClass("java/lang/Object"));
	mi.setAccessFlags(MethodInfo.ACC_PUBLIC);
	jp = parser.code.addCode(gt);
	np = parser.code.addCode(Mnemonic.NOP);
	parser.parse(System.in);
	parser.code.addCode(Mnemonic.RETURN);
	gt.setOffset(parser.code.getCurrentOffset(jp));
	for(int i = 1; i < parser.local.getMax(); i++) {
		parser.code.addCode(new IConst(0));
		parser.code.addCode(new IStore(i));
	}
	gb.setOffset(parser.code.getAddress(np) - parser.code.getCurrentAddress());
	parser.code.addCode(gb);
	parser.code.setMaxStack(1024);
	parser.code.setMaxLocals(parser.local.getMax());
	mi.addAttribute(parser.code);
	cf.addMethod(mi);

	addBuiltIn(cf);
	addBootStrap(args[0], cf);

	FileOutputStream fs = null;
	try {
		fs = new FileOutputStream(args[0] + ".class");
		cf.generateClassFile(fs);
	} finally {
		if(fs != null) {
			fs.close();
		}
	}
}
