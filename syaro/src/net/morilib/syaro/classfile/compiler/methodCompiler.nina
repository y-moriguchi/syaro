#
# Copyright 2016-2017 Yuichiro Moriguchi
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
--------------------------
method compiler

@author Yuichiro MORIGUCHI
--------------------------
#machine DFABuilder
#option targetLanguage=Java
#label VAR=/[A-Za-z_][A-Za-z_0-9_]*/
#label TYPE=/[A-Za-z_][A-Za-z_0-9_]*/
#label LAHEADVAR=/?=[A-Za-z_][A-Za-z_0-9_]*[ \t]*=/
#label LAHEADDECL=/?=[A-Za-z_][A-Za-z_0-9_]*(\[\])*[ \t\n]*[A-Za-z_][A-Za-z_0-9_]*[ \t\n]*[,;]/
#label LAHEADCAST=/?=\([ \t\n]*[A-Za-z_][A-Za-z0-9_]*(\[\])*[ \t\n]*\)[A-Za-z_0-9\.\(]/
#label S=[ \t\n]
#package net.morilib.syaro.classfile.compiler
%{
import java.io.StringReader;
import net.morilib.syaro.classfile.*;
import net.morilib.syaro.classfile.code.*;
%}
 @S@@@@@@@@            @@@@@@@@@@@
 @        >-{stmtlist}->         @
 @@@@@@@@@@            @@@@@@@@@@@
-- decltype --
    +-${S}-+
 *S*^******v*        *A<String>****************
 *          >-${VAR}->%% = $buffer.toString();*
 ************        *v************************
                      +----------+
                                 |
                     *B<Integer>*v*
                     *%% = 0;     *
                     *v************
                      |+--------+
                     *vv*      *^************
                     *  >-'[]'->%B = $B + 1;*
                     *v**      **************
                      |
                     @v@@@@@@@@@@@@@@@@@
                     @decltype($A, $B);@
                     @@@@@@@@@@@@@@@@@@@
-- stmtlist --
           +----------+
 @S@@@@@@@@v@        @^@@@@@@@@@@@
 @          >-{stmt}->putCodes();@
 @v@@@@@@^@v@        @@@@@@@@@@@@@
  +-${S}-+ |
           |
           |                  @@@
           +-'}'/'UNGET($c);'-> @
                              @@@
-- stmt --
    +-${S}-+          +-${S}-+       +-${S}-+                     +-${S}-+
 *S*^******v*        *^******v*     *^******v*        *LIF<AST>* *^******v*     ***
 *          >-+-"if"->        >-'('->        >-{expr}->%% = _e;>->        >-')'-> >-{stmt}-(IF1)
 ************ |      **********     **********        ********** **********     ***
              |        +-${S}-+
              |       *^******v*        *LEL<SAST>*        @@@@@@@@@@@@@@@@@@@@
              | (IF1)->        >-"else"->%% = _s; >-{stmt}->endif($LIF, $LEL);@
              |       *v********        ***********        @@@@@@@@@@@@@@@@@@@@
              |        |
              |        | @@@@@@@@@@@@@@
              |        +->endif($LIF);@
              |          @@@@@@@@@@@@@@
              |          +-${S}-+                  +-${S}-+
              |         *^******v*     ***        *^******v*
              +-"while"->        >-'('-> >-{expr}->        >-')'-(WH1)
              |         **********     ***        **********
              |
              |       *WX<AST>**        @@@@@@@@@@@@@
              | (WH1)->%% = _e;>-{stmt}->endwh($WX);@
              |       **********        @@@@@@@@@@@@@
              |                  +-${S}-+           +-${S}-+                  +-${S}-+
              |      ***        *^******v*         *^******v*     ***        *^******v*
              +-"do"-> >-{stmt}->        >-"while"->        >-'('-> >-{expr}->        >-')'-(DO1)
              |      ***        **********         **********     ***        **********
              |        +-${S}-+
              |       *^******v*     @@@@@@@@@@
              | (DO1)->        >-';'->enddo();@
              |       **********     @@@@@@@@@@
              |        +-${S}-+         +-${S}-+          +-${S}-+       +-${S}-+
              |       *^******v***     *^******v*        *^******v*     *^******v*
              +-"for"->_e = null;>-'('->        >-{expr}->        >-';'->        >-(FO1)
              |       ************     *v********        **********     *^********
              |                         |                                |
              |                         |     ***********                |
              |                         +-';'->         >----------------+
              |                               ***********
              |                     +-${S}-+          +-${S}-+       +-${S}-+
              |       *FE<AST>**** *^******v*        *^******v*     *^******v*
              | (FO1)->%% = _e;  >->        >-{expr}->        >-';'->        >-(FO2)
              |       *_e = null;* *v********        **********     *^********
              |       ************  |                                |
              |                     |     ***********                |
              |                     +-';'->         >----------------+
              |                           ***********
              |                     +-${S}-+          +-${S}-+       +-${S}-+
              |       *FI<AST>**** *^******v*        *^******v*     *^******v*
              | (FO2)->%% = _e;  >->        >-{expr}->        >-')'->        >-(FO3)
              |       *_e = null;* *v********        **********     *^********
              |       ************  |                                |
              |                     |     ***********                |
              |                     +-')'->         >----------------+
              |                           ***********
              |
              |       *FS<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@
              | (FO3)->%% = _e;>-{stmt}->endfor($FE, $FI, $FS);@
              |       **********        @@@@@@@@@@@@@@@@@@@@@@@@
              |          +-${S}-+
              |         *^******v*     @@@@@@@@@@@
              +-"break"->        >-';'->_break();@
              |         **********     @@@@@@@@@@@
              |             +-${S}-+
              |            *^******v*     @@@@@@@@@@@@@@
              +-"continue"->        >-';'->_continue();@
              |            **********     @@@@@@@@@@@@@@
              |                       +-${S}-+
              |     *BL<BlockAST>*** *^******v*        ************
              +-"{"->%% = beginb();>->        >-{stmt}->addb($BL);*
              |     **************** *v******^*        *v**********
              |                       |      +----------+
              |                       |     @@@@@@@@@@@@
              |                       +-'}'->endb($BL);@
              |                             @@@@@@@@@@@@
              |           +-${S}-+            +-${S}-+
              |          *^******v***        *^******v*     @@@@@@@@@@@@
              +-"return"->_e = null;>-{expr}->        >-';'->_return();@
              |          **********v*        **********     @^@@@@@@@@@@
              |                    +--------------------';'--+
              |
              |          +-${S}-+          +-${S}-+
              |         *^******v*        *^******v*     @@@@@@@@@@@
              +-"throw"->        >-{expr}->        >-';'->_throw();@
              |         **********        **********     @@@@@@@@@@@
              |
              |       ***        @@@
              +-"try"-> >-{trys}-> @
              |       ***        @@@
              |
              |          ***           @@@
              +-"switch"-> >-{switchs}-> @
              |          ***           @@@
              |
              |         +-${S}-+
              |        *^******v*     @@@@@@@@@@@
              +-{expr}->        >-';'->simple();@
                       **********     @@@@@@@@@@@
-- trys --
    +-${S}-+
 *S*^******v*
 *          >----------------------------+
 ************                            |
                                         |
 *AA<java.util.List<CatchEntry>>*********v****
 *%% = new java.util.ArrayList<CatchEntry>();*
 *v*******************************************
  |                     +-${S}-+
 *v*        *AB<SAST>* *^******v*
 * >-{stmt}->%% = _s;>->        *
 ***        ********** *v********
     +------------------+
     |
     |           +-${S}-+       +-${S}-+
 *BA*v*         *^******v*     *^******v*         *AC<String>***************
 *    >-"catch"->        >-'('->        >-${TYPE}->%% = $buffer.toString();*
 *v****         **********     **********         *v************************
  |     +------------------------------------------+
  |     |  +-${S}-+                                     +-${S}-+
  |     | *^******v*        *AD<String>*************** *^******v*
  |     +->        >-${VAR}->%% = $buffer.toString();>->        *
  |       **********        ************************** *v********
  |     +-----------------------------------------------+
  |     |
  |     |                                                +-${S}-+
  |     |     ***        ****************************** *^******v*
  |     +-')'-> >-{stmt}->addcatch($AA, $AC, $AD, _s);>->        >-(BA)
  |           ***        ****************************** **********
  +--------+
 *AE<SAST>*v*
 *%% = null;*
 *v**********
  | +-${S}-+
 *v*^******v*           ***        ***********
 *          >-"finally"-> >-{stmt}->%AE = _s;>-(BB)
 **********v*           ***        ***********
           |
 @BB@@@@@@@v@@@@@@@@@@@@@@@@@@
 @_s = _catch($AB, $AA, $AE);@
 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- switchs --
    +-${S}-+
 *S*^******v*
 *          *
 *v**********
  |       +-${S}-+                     +-${S}-+
 *v*     *^******v*        *AA<AST>** *^******v*     ***
 * >-'('->        >-{expr}->%% = _e;>->        >-')'-> *
 ***     **********        ********** **********     *v*
  +---------------------------------------------------+
  |+-${S}-+
 *v^******v*     ***
 *         >-'{'-> *
 ***********     *v*
                  |
 *AB<SwitchAST>***v********
 *%% = new SwitchAST($AA);*
 ****v*********************
     |+-${S}-+
 *BA*v^******v*
 *            *
 *v************
  |         +-${S}-+          +-${S}-+
  |        *^******v*        *^******v*     ******************
  +-"case"->        >-{expr}->        >-':'->$AB.addCase(_e);>-(BA)
  |        **********        **********     ******************
  |            +-${S}-+ 
  |           *^******v*     *******************
  +-"default"->        >-':'->$AB.addDefault();>-(BA)
  |           **********     *******************
  |
  |     @@@@@@@@@@@@@@@@@@@@@@@@@@@@
  +-"}"->$AB.endSwitch(); _s = $AB;@
  |     @@@@@@@@@@@@@@@@@@@@@@@@@@@@
  |
  |        ***********************
  +-{stmt}->$AB.addStatement(_s);>-(BA)
           ***********************
-- expr --
 *S*        @@@@@@@@@@@
 * >-{asgn}->         @
 ***        @@@@@@@@@@@
-- asgn --
             +-${S}-+         +-${S}-+
 *S*        @^@@@@@@v@       *^******v* *AA<AST>**        @@@@@@@@@@@@@@@@@@@@
 * >-{lior}->        >-+-"="->        >->%% = _e;>-{asgn}->asgn(${AA}, null);@
 ***        @@@@@@@@@@ |     ********** **********        @@@@@@@@@@@@@@@@@@@@
                       |       +-${S}-+
                       |      *^******v* *AB<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       +-"+="->        >->%% = _e;>-{asgn}->asgn(${AB}, AssignAST.Type.ADD);@
                       |      ********** **********        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       |       +-${S}-+
                       |      *^******v* *AC<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       +-"-="->        >->%% = _e;>-{asgn}->asgn(${AC}, AssignAST.Type.SUB);@
                       |      ********** **********        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       |       +-${S}-+
                       |      *^******v* *AD<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       +-"*="->        >->%% = _e;>-{asgn}->asgn(${AD}, AssignAST.Type.MUL);@
                       |      ********** **********        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       |       +-${S}-+
                       |      *^******v* *AE<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       +-"/="->        >->%% = _e;>-{asgn}->asgn(${AE}, AssignAST.Type.DIV);@
                       |      ********** **********        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       |       +-${S}-+
                       |      *^******v* *AF<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       +-"%="->        >->%% = _e;>-{asgn}->asgn(${AF}, AssignAST.Type.REM);@
                       |      ********** **********        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       |        +-${S}-+
                       |       *^******v* *AG<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       +-"<<="->        >->%% = _e;>-{asgn}->asgn(${AG}, AssignAST.Type.SHL);@
                       |       ********** **********        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       |        +-${S}-+
                       |       *^******v* *AH<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       +-">>="->        >->%% = _e;>-{asgn}->asgn(${AH}, AssignAST.Type.SHR);@
                       |       ********** **********        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       |       +-${S}-+
                       |      *^******v* *AI<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       +-"&="->        >->%% = _e;>-{asgn}->asgn(${AI}, AssignAST.Type.BAND);@
                       |      ********** **********        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       |       +-${S}-+
                       |      *^******v* *AJ<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       +-"^="->        >->%% = _e;>-{asgn}->asgn(${AJ}, AssignAST.Type.BXOR);@
                       |      ********** **********        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       |        +-${S}-+
                       |       *^******v* *AK<AST>**        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       +-"\|="->        >->%% = _e;>-{asgn}->asgn(${AK}, AssignAST.Type.BOR);@
                               ********** **********        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- lior --
                    +-${S}-+              +-${S}-+
 *S*        @A<AST>@^@@@@@@v@            *^******v*        @@@@@@@@@@@@
 * >-{land}->%% = _e;       >---"\|\|"--->        >-{land}->lior($A); >-(A)
 ***        @@@@@@@@@@@@@@@@@            **********        @@@@@@@@@@@@
-- land --
                    +-${S}-+            +-${S}-+
 *S*        @A<AST>@^@@@@@@v@          *^******v*        @@@@@@@@@@@@
 * >-{bior}->%% = _e;       >---"&&"--->        >-{bior}->land($A); >-(A)
 ***        @@@@@@@@@@@@@@@@@          **********        @@@@@@@@@@@@
-- bior --
                    +-${S}-+                        +-${S}-+
 *S*        @A<AST>@^@@@@@@v@              ***     *^******v*        @@@@@@@@@@@
 * >-{bxor}->%% = _e;       >-/?=\|[^\|=]/-> >-'|'->        >-{bxor}->bior($A);>-(A)
 ***        @@@@@@@@@@@@@@@@@              ***     **********        @@@@@@@@@@@
-- bxor --
                    +-${S}-+              +-${S}-+
 *S*        @A<AST>@^@@@@@@v@            *^******v*        @@@@@@@@@@@
 * >-{band}->%% = _e;       >---"^/!="--->        >-{band}->bxor($A);>-(A)
 ***        @@@@@@@@@@@@@@@@@            **********        @@@@@@@@@@@
-- band --
                    +-${S}-+                      +-${S}-+
 *S*        @A<AST>@^@@@@@@v@            ***     *^******v*        @@@@@@@@@@@
 * >-{loeq}->%% = _e;       >-/?=&[^&=]/-> >-'&'->        >-{loeq}->band($A);>-(A)
 ***        @@@@@@@@@@@@@@@@@            ***     **********        @@@@@@@@@@@
-- loeq --
                    +-${S}-+              +-${S}-+
 *S*        @A<AST>@^@@@@@@v@            *^******v*        @@@@@@@@@@
 * >-{lcmp}->%% = _e;       >-+-"=="----->        >-{lcmp}->leq($A);>-(A)
 ***        @@@@@@@@@@@@@@@@@ |          **********        @@@@@@@@@@
                              |           +-${S}-+
                              |          *^******v*        @@@@@@@@@@
                              +-"!="----->        >-{lcmp}->lne($A);>-(A)
                                         **********        @@@@@@@@@@
-- lcmp --
                    +-${S}-+                                +-${S}-+
 *S*        @A<AST>@^@@@@@@v@               ***            *^******v*        @@@@@@@@@@
 * >-{shft}->%% = _e;       >-/?=[<>][^<>]/-> >-+-"<"------>        >-{shft}->llt($A);>-(A)
 ***        @@@@@@@@@@@@@@@@@               *** |          **********        @@@@@@@@@@
                                                |           +-${S}-+
                                                |          *^******v*        @@@@@@@@@@
                                                +-"<="----->        >-{shft}->lle($A);>-(A)
                                                |          **********        @@@@@@@@@@
                                                |           +-${S}-+
                                                |          *^******v*        @@@@@@@@@@
                                                +-">"------>        >-{shft}->lgt($A);>-(A)
                                                |          **********        @@@@@@@@@@
                                                |           +-${S}-+
                                                |          *^******v*        @@@@@@@@@@
                                                +-">="----->        >-{shft}->lge($A);>-(A)
                                                           **********        @@@@@@@@@@
-- shft --
                    +-${S}-+                 +-${S}-+
 *S*        @A<AST>@^@@@@@@v@               *^******v*        @@@@@@@@@@@@@
 * >-{poly}->%% = _e;       >-+-">>/!="----->        >-{poly}->rshift($A);>-(A)
 ***        @@@@@@@@@@@@@@@@@ |             **********        @@@@@@@@@@@@@
                              |              +-${S}-+
                              |             *^******v*        @@@@@@@@@@@@@
                              +-"<</!="----->        >-{poly}->lshift($A);>-(A)
                                            **********        @@@@@@@@@@@@@
-- poly --
                    +-${S}-+            +-${S}-+
 *S*        @A<AST>@^@@@@@@v@          *^******v*        @@@@@@@@@@
 * >-{term}->%% = _e;       >-+-"+/!="->        >-{term}->add($A);>-(A)
 ***        @@@@@@@@@@@@@@@@@ |        **********        @@@@@@@@@@
                              |         +-${S}-+
                              |        *^******v*        @@@@@@@@@@
                              +-"-/!="->        >-{term}->sub($A);>-(A)
                                       **********        @@@@@@@@@@
-- term --
                     +-${S}-+            +-${S}-+
 *S*         @A<AST>@^@@@@@@v@          *^******v*         @@@@@@@@@@
 * >-{cast}-->%% = _e;       >-+-"*/!="->        >-{cast}-->mul($A);>-(A)
 ***         @@@@@@@@@@@@@@@@@ |        **********         @@@@@@@@@@
                               |          +-${S}-+
                               |         *^******v*         @@@@@@@@@@
                               +-"\//!="->        >-{cast}-->div($A);>-(A)
                               |         **********         @@@@@@@@@@
                               |         +-${S}-+
                               |        *^******v*         @@@@@@@@@@
                               +-"%/!="->        >-{cast}-->mod($A);>-(A)
                                        **********         @@@@@@@@@@
-- cast --
    +-${S}-+                 +-${S}-+       +-${S}-+
 *S*^******v*               *^******v*     *^******v*
 *          >-${LAHEADCAST}->        >-'('->        *
 *v**********               **********     *v********
  |                                         |
  |         @@@                             |
  +-{unary}-> @                             |
  |         @@@                             |
  |                                         |
  |                  +-{decltype}-----------+
  |                  |
  |                  |   +-${S}-+
  | *A<VariableType>*v* *^******v*     ***         @@@@@@@@@@@
  | *%% = decltype;   >->        >-')'-> >-{unary}->cast($A);@
  | ******************* **********     ***         @@@@@@@@@@@
  |        +-${S}-+
  |       *^******v*         *E<String>****************
  +-"new"->        >-${TYPE}->%% = $buffer.toString();*
          **********         *v************************
           +------------------+
           | +-${S}-+
          *v*^******v*
          *          *
          *v**********
           |
          *v*     ***        ***     *F<Integer>*
          * >-'['-> >-{expr}-> >-']'->%% = 0;   *
          *v*     ***        ***     *v**********
           |       +------------------+
           |       |+--------+
           |      *vv*      *^************
           |      *  >-'[]'->%F = $F + 1;*
           |      *v**      **************
           |       |
           |      @v@@@@@@@@@@@@@@@@@@@@@
           |      @newarray($E, _e, $F);@
           |      @@@@@@@@@@@@@@@@@@@@@@@
           |                 +-${S}-+              +-${S}-+
           |     *AR<NewAST>*^******v* ***        *^******v*****
           +-'('->%% = beginnew($E); >-> >-{expr}->addnew($AR);*
                 *v******************* *^*        *v**v*********
                  |                     +--','-----+  |
                  |     @@@@@@@@@@@@@                 |
                  +-')'->neu($AR);  <-')'-------------+
                        @@@@@@@@@@@@@
-- unary --
    +-${S}-+         +-${S}-+
 *S*^******v*       *^******v*        @@@@@@@@@@@
 *          >-+-"-"->        >-{dot}-->uminus();@
 ************ |     **********        @@@@@@@@@@@
              |      +-${S}-+
              |     *^******v*        @@@@@@@@@@@
              +-"+"->        >-{dot}-->         @
              |     **********        @@@@@@@@@@@
              |      +-${S}-+
              |     *^******v*        @@@@@@@@@@@
              +-"~"->        >-{dot}-->bnot();  @
              |     **********        @@@@@@@@@@@
              |      +-${S}-+
              |     *^******v*        @@@@@@@@@@@
              +-"!"->        >-{dot}-->lnot();  @
              |     **********        @@@@@@@@@@@
              |       +-${S}-+
              |      *^******v*        @@@@@@@@@@@
              +-"++"->        >-{dot}-->incpre();@
              |      **********        @@@@@@@@@@@
              |       +-${S}-+
              |      *^******v*        @@@@@@@@@@@
              +-"--"->        >-{dot}-->decpre();@
              |      **********        @@@@@@@@@@@
              |
              |        @@@
              +-{dot}--> @
                       @@@
-- dot --
                    +-${S}-+       +-${S}-+
 *S*        @A<AST>@^@@@@@@v@     *^******v*        @@@@@@@@@@
 * >-{prex}->%% = _e;       >-'.'->        >-{prex}->dot($A);>-(A)
 ***        @@@@@@@@@@@@@@@@@     **********        @@@@@@@@@@
-- prex --
             +-${S}-+
 *S*        @^@@@@@@v@        @@@@@@@@@@@@
 * >-{elem}->        >-+-"++"->incpost();@
 ***        @@@@@@@@@@ |      @@@@@@@@@@@@
                       |
                       |      @@@@@@@@@@@@
                       +-"--"->decpost();@
                       |      @@@@@@@@@@@@
                       |                  +-${S}-+              +-${S}-+
                       |     *AR<CallAST>*^******v* ***        *^******v******
                       +-'('->%% = begincall();   >-> >-{expr}->addcall($AR);*
                       |     *v******************** *^*        *v**v**********
                       |      |                      +--','-----+  |
                       |      |     @@@@@@@@@@@@@                  |
                       |      +-')'->call($AR); <-')'--------------+
                       |            @@@@@@@@@@@@@
                       |                        +-${S}-+
                       |     *AA<AST>**        *^******v*     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                       +-'['->%% = _e;>-{expr}->        >-']'->_e = new ArrayIndexAST($AA, _e);@
                             *^********        **********     @v@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                              |                 +-${S}-+       |
                              |                @^@@@@@@v@      |
                              +-'['------------<        <------+
                                               @@@@@@@@@@
-- elem --
    +-${S}-+
 *S*^******v*        @@@        @@@@@@@@@@@@@@@@@@@
 *          >-+-{%f}-> >-+-[fF]->konstfloat($num);@
 ************ |      @@@ |      @@@@@@@@@@@@@@@@@@@
              |          |
              |          |      @@@@@@@@@@@@@@
              |          +------>konst($num);@
              |                 @@@@@@@@@@@@@@
              |
              |     ***        ***     @@@
              +-'('-> >-{expr}-> >-')'-> @
              |     ***        ***     @@@
              |
              |        @@@@@@@@@@@@@@@@@@@@@@@@@@
              +-${VAR}->var($buffer.toString());@
              |        @@@@@@@@@@@@@@@@@@@@@@@@@@
              |
              |     ***       @@@@@@@@
              +-'"'-> >-{str}->str();@
              |     ***       @@@@@@@@
              |
              |      ***
              +-'\''-> >-+
                     *** |
                         |
                         |          ************      @@@
                         +-[^\\'\n]->char1($c);>-'\''-> @
                         |          ************      @@@
                         |
                         |      ***               ***************      @@@
                         +-'\\'-> >-+-[\\bfnrt'"]->charesc1($c);>-'\''-> @
                                *** |             ***************      @@@
    +-------------------------------+
    |     ***                    **************************************************      @@@
    +-'u'-> >-/[0-9A-Fa-f]{4,4}/->char1(Integer.parseInt($buffer.toString(), 16));>-'\''-> @
    |     ***                    **************************************************      @^@
    |                                                                          +----'\''--+
    |                    ***              *************************************^***********
    +-[0-9]/'UNGET($c);'-> >-/[0-7]{3,3}/->char1(Integer.parseInt($buffer.toString(), 8));*
                         ***              *************************************************
-- str --
 *S*********** *A*       @@@
 *beginStr();>-> >-+-'"'-> @
 ************* *** |     @@@
                   |
                   |          *************
                   +-[^\\"\n]->addStr($c);>-(A)
                   |          *************
                   |
                   |      ***              *************
                   +-'\\'-> >-+-[\\bfnrt"]->escStr($c);>-(A)
                          *** |            *************
  +---------------------------+
  |     ***                    ***************************************************
  +-'u'-> >-/[0-9A-Fa-f]{4,4}/->addStr(Integer.parseInt($buffer.toString(), 16));>-(A)
  |     ***                    ***************************************************
  |                                      +-(A)
  |                    ***              *^************************************************
  +-[0-9]/'UNGET($c);'-> >-/[0-7]{3,3}/->addStr(Integer.parseInt($buffer.toString(), 8));*
                       ***              **************************************************
%%
private Classfile classfile;
private MethodInfo method;
private FunctionSpace functions;
private LocalVariableSpace local;
private Code code;
private Goto gotoInst;
private int localStart;
private int localRet;
private NameAndType funcnt;
private java.util.List<NameAndType> funcargs;
private java.util.List<NameAndType> localvars;
private FunctionDefinition funcdefobj;
private VariableType decltype;
private SAST _s;
private AST _e;
private StringBuilder strbuilder;
private int methodFlags;

private void putCodes() {
	_s.putCode(functions, local, code, null, -1, null,
			new java.util.ArrayList<Integer>(),
			new java.util.ArrayList<Integer>());
}

private VariableType getTypeFromName(String tname) {
	if(tname.equals("byte")) {
		return Primitive.BYTE;
	} else if(tname.equals("char")) {
		return Primitive.CHAR;
	} else if(tname.equals("short")) {
		return Primitive.SHORT;
	} else if(tname.equals("int")) {
		return Primitive.INT;
	} else if(tname.equals("long")) {
		return Primitive.LONG;
	} else if(tname.equals("float")) {
		return Primitive.FLOAT;
	} else if(tname.equals("double")) {
		return Primitive.DOUBLE;
	} else if(tname.equals("Object")) {
		return QuasiPrimitive.OBJECT;
	} else if(tname.equals("String")) {
		return QuasiPrimitive.STRING;
	} else {
		return new SymbolType(tname);
	}
}

private void decltype(String type, int dim) {
	VariableType t;

	t = getTypeFromName(type);
	for(int i = 0; i < dim; i++) {
		t = new ArrayType(t);
	}
	decltype = t;
}

private void getFuncdef() {
	java.util.List<VariableType> a = new java.util.ArrayList<VariableType>();

	for(NameAndType x : funcargs) {
		a.add(x.getType());
	}
	funcdefobj = new FunctionDefinition(functions.getClassname(),
			funcnt.getName(), funcnt.getType(), a);
}

private void funcbegin() {
	getFuncdef();
	local = new LocalVariableSpace(funcdefobj.getReturnType(),
			(methodFlags & MethodInfo.ACC_STATIC) != 0);
	for(NameAndType t : funcargs) {
		local.putVariable(t.getName(), t.getType());
	}
	local.putVariable(null, QuasiPrimitive.OBJECT);
	for(NameAndType t : localvars) {
		local.putVariable(t.getName(), t.getType());
	}
	method = new MethodInfo(funcnt.getName(), funcdefobj.getDescriptor(functions));
	method.setAccessFlags(methodFlags);
	code = new Code();
	gotoInst = new Goto();
	localStart = code.addCode(gotoInst);
	localRet = code.addCode(Mnemonic.NOP);
}

private void funcend() {
	Goto gb = new Goto();
	int fargs = 0;
	int off;

	off = (methodFlags & MethodInfo.ACC_STATIC) != 0 ? 0 : 1;
	gotoInst.setOffset(code.getCurrentOffset(localStart));
	for(NameAndType x : funcargs) {
		if(x.getType().equals(Primitive.DOUBLE) || x.getType().equals(Primitive.LONG)) {
			fargs += 2;
		} else {
			fargs++;
		}
	}
	for(int i = fargs + off + 1; i < local.getMax(); i++) {
		if(local.getType(i) == null) {
			// do nothing
		} else if(local.getType(i).isConversible(Primitive.INT)) {
			code.addCode(new IConst(0));
			code.addCode(new IStore(i));
		} else if(local.getType(i).equals(Primitive.LONG)) {
			code.addCode(new LConst(0));
			code.addCode(new LStore(i));
		} else if(local.getType(i).equals(Primitive.FLOAT)) {
			code.addCode(new FConst(0));
			code.addCode(new FStore(i));
		} else if(local.getType(i).equals(Primitive.DOUBLE)) {
			code.addCode(new DConst(0));
			code.addCode(new DStore(i));
		} else {
			code.addCode(Mnemonic.ACONST_NULL);
			code.addCode(new AStore(i));
		}
	}
	gb.setOffset(code.getAddress(localRet) - code.getCurrentAddress());
	code.addCode(gb);
	code.setMaxStack(1024);
	code.setMaxLocals(local.getMax() + 2);
	method.addAttribute(code);
	classfile.addMethod(method);
}

private void func() {
	funcbegin();
}

private void endfunc() {
	if(funcdefobj.getReturnType().equals(Primitive.VOID)) {
		code.addCode(Mnemonic.RETURN);
	} else if(funcdefobj.getReturnType().isConversible(Primitive.INT)) {
		code.addCode(new IConst(0));
		code.addCode(Mnemonic.IRETURN);
	} else if(funcdefobj.getReturnType().isConversible(Primitive.LONG)) {
		code.addCode(new LConst(0));
		code.addCode(Mnemonic.LRETURN);
	} else if(funcdefobj.getReturnType().isConversible(Primitive.FLOAT)) {
		code.addCode(new FConst(0));
		code.addCode(Mnemonic.FRETURN);
	} else if(funcdefobj.getReturnType().isConversible(Primitive.DOUBLE)) {
		code.addCode(new DConst(0));
		code.addCode(Mnemonic.DRETURN);
	} else {
		code.addCode(Mnemonic.ACONST_NULL);
		code.addCode(Mnemonic.ARETURN);
	}
	funcend();
}

private void asgn(AST a, AssignAST.Type op) {
	_e = new AssignAST(op, a, _e);
}

private void konst(Number num) {
	if(num instanceof Integer) {
		_e = new IntegerAST(num.intValue());
	} else {
		_e = new DoubleAST(num.doubleValue());
	}
}

private void konstfloat(Number num) {
	_e = new FloatAST(num.floatValue());
}

private void str()
{
	_e = new StringAST(strbuilder.toString());
}

private void char1(int c) {
	_e = new CharAST((char)c);
}

private void charesc1(int c) {
    switch(c)
    {
    case 'b':
        char1('\b');
        break;
    case 'f':
        char1('\f');
        break;
    case 'n':
        char1('\n');
        break;
    case 'r':
        char1('\r');
        break;
    case 't':
        char1('\t');
        break;
    default:
        char1((char)c);
        break;
    }
}

private void beginStr()
{
    strbuilder = new StringBuilder();
}

private void addStr(int c)
{
    strbuilder.append((char)c);
}

private void escStr(int c)
{
    switch(c)
    {
    case 'b':
        strbuilder.append('\b');
        break;
    case 'f':
        strbuilder.append('\f');
        break;
    case 'n':
        strbuilder.append('\n');
        break;
    case 'r':
        strbuilder.append('\r');
        break;
    case 't':
        strbuilder.append('\t');
        break;
    default:
        strbuilder.append((char)c);
        break;
    }
}

private void lior(AST a) {
	_e = new BinaryAST(BinaryAST.Type.ILOR, a, _e);
}

private void land(AST a) {
	_e = new BinaryAST(BinaryAST.Type.ILAND, a, _e);
}

private void bior(AST a) {
	_e = new BinaryAST(BinaryAST.Type.IBOR, a, _e);
}

private void bxor(AST a) {
	_e = new BinaryAST(BinaryAST.Type.IBXOR, a, _e);
}

private void band(AST a) {
	_e = new BinaryAST(BinaryAST.Type.IBAND, a, _e);
}

private void leq(AST a) {
	_e = new BinaryAST(BinaryAST.Type.IEQ, a, _e);
}

private void lne(AST a) {
	_e = new BinaryAST(BinaryAST.Type.INE, a, _e);
}

private void llt(AST a) {
	_e = new BinaryAST(BinaryAST.Type.ILT, a, _e);
}

private void lle(AST a) {
	_e = new BinaryAST(BinaryAST.Type.ILE, a, _e);
}

private void lgt(AST a) {
	_e = new BinaryAST(BinaryAST.Type.IGT, a, _e);
}

private void lge(AST a) {
	_e = new BinaryAST(BinaryAST.Type.IGE, a, _e);
}

private void rshift(AST a) {
	_e = new BinaryAST(BinaryAST.Type.ISHR, a, _e);
}

private void lshift(AST a) {
	_e = new BinaryAST(BinaryAST.Type.ISHL, a, _e);
}

private void add(AST a) {
	_e = new BinaryAST(BinaryAST.Type.IADD, a, _e);
}

private void sub(AST a) {
	_e = new BinaryAST(BinaryAST.Type.ISUB, a, _e);
}

private void mul(AST a) {
	_e = new BinaryAST(BinaryAST.Type.IMUL, a, _e);
}

private void div(AST a) {
	_e = new BinaryAST(BinaryAST.Type.IDIV, a, _e);
}

private void mod(AST a) {
	_e = new BinaryAST(BinaryAST.Type.IREM, a, _e);
}

private void cast(VariableType type) {
	_e = new CastAST(type, _e);
}

private void newarray(String type, AST ind, int dim) {
	VariableType t;

	t = getTypeFromName(type);
	t = new ArrayType(t);
	for(int i = 0; i < dim; i++) {
		t = new ArrayType(t);
	}
	_e = new NewArrayAST((ArrayType)t, ind);
}

private void uminus() {
	_e = new UnaryAST(UnaryAST.Type.INEG, _e);
}

private void bnot() {
	_e = new UnaryAST(UnaryAST.Type.IBNOT, _e);
}

private void lnot() {
	_e = new UnaryAST(UnaryAST.Type.ILNOT, _e);
}

private void incpre() {
	_e = new IncDecAST(true, true, _e);
}

private void decpre() {
	_e = new IncDecAST(false, true, _e);
}

private void incpost() {
	_e = new IncDecAST(true, false, _e);
}

private void decpost() {
	_e = new IncDecAST(false, false, _e);
}

private void dot(AST a) {
	_e = new DotAST(a, _e);
}

private CallAST begincall() {
	return new CallAST(_e);
}

private void addcall(CallAST call) {
	call.addArgument(_e);
}

private void call(CallAST call) {
	_e = call;
}

private NewAST beginnew(String tname) {
	return new NewAST(getTypeFromName(tname));
}

private void addnew(NewAST neu) {
	neu.addArgument(_e);
}

private void neu(NewAST neu) {
	_e = neu;
}

private void var(String name) {
	_e = new SymbolAST(name);
}

private void endif(AST expr) {
	_s = new IfAST(expr, _s, null);
}

private void endif(AST expr, SAST _if) {
	_s = new IfAST(expr, _if, _s);
}

private void _break() {
	_s = new BreakAST();
}

private void _continue() {
	_s = new ContinueAST();
}

private void endwh(AST expr) {
	_s = new WhileAST(expr, _s);
}

private void enddo() {
	_s = new DoAST(_e, _s);
}

private void endfor(AST fe, AST fi, AST fs) {
	_s = new ForAST(fe, fi, fs, _s);
}

private BlockAST beginb() {
	return new BlockAST();
}

private void addb(BlockAST s) {
	s.addStatement(_s);
}

private void endb(BlockAST s) {
	_s = s;
}

private void _return() {
	_s = new ReturnAST(_e);
}

private void simple() {
	_s = new SimpleAST(_e);
}

private void _throw() {
	_s = new ThrowAST(_e);
}

private void addcatch(java.util.List<CatchEntry> lst, String tname,
		String vname, SAST s) {
	lst.add(new CatchEntry(getTypeFromName(tname), vname, s));
}

private SAST _catch(SAST body, java.util.List<CatchEntry> lst, SAST fn) {
	return new TryAST(body, lst, fn);
}

public static void compile(Classfile classfile,
		int methodFlags,
		NameAndType returnType,
		java.util.List<NameAndType> args,
		java.util.List<NameAndType> localvars,
		FunctionSpace functionSpace,
		String code) {
	MethodCompiler mc = new MethodCompiler();

	try {
		mc.classfile = classfile;
		mc.methodFlags = methodFlags;
		mc.funcnt = returnType;
		mc.funcargs = new java.util.ArrayList<NameAndType>(args);
		mc.localvars = new java.util.ArrayList<NameAndType>(localvars);
		mc.functions = functionSpace;
		mc.func();
		mc.parse(new StringReader(code));
		mc.endfunc();
	} catch(java.io.IOException e) {
		throw new RuntimeException(e);
	}
}
